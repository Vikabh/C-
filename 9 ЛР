#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <ctime>
#include <random>

using namespace std;

// Исключение для отрицательного здоровья
class NegativeHealthException : public exception {
public:
    const char* what() const noexcept override {
        return "Health cannot be negative";
    }
};

// Шаблонный логгер
template<typename T>
class Logger {
    string filename;
public:
    Logger(const string& fn) : filename(fn) {}

    void log(const T& message) {
        ofstream file(filename, ios::app);
        if (file.is_open()) {
            file << message << endl;
        }
    }
};

class Inventory {
    vector<string> items;
public:
    void addItem(const string& item) {
        items.push_back(item);
    }

    void show() const {
        if (items.empty()) {
            cout << "Inventory is empty!" << endl; // Добавлено сообщение для пустого инвентаря
            return;
        }
        cout << "Inventory items:" << endl;
        for (size_t i = 0; i < items.size(); ++i) {
            cout << i + 1 << ". " << items[i] << endl; // Нумерованный список
        }
    }
};

class Monster; // Предварительное объявление

class Character {
    string name;
    int hp;
    int attack;
    int defense;
    int level;
    int exp;
    Inventory inventory;

public:
    Character(const string& n) : name(n), hp(100), attack(10), defense(5), level(1), exp(0) {}

    void takeDamage(int damage) {
        if (hp - damage < 0) throw NegativeHealthException();
        hp -= damage;
    }

    void attackEnemy(Monster& target);

    void heal(int amount) {
        hp += amount;
    }

    void gainExp(int amount) {
        exp += amount;
        if (exp >= 100) {
            level++;
            exp = 0;
            attack += 2;
            defense += 1;
            cout << "Level up! New level: " << level << endl;
        }
    }

    Inventory& getInventory() { return inventory; }
    int getHp() const { return hp; }
    int getDefense() const { return defense; }
};

class Monster {
protected:
    string name;
    int hp;
    int attack;
    int defense;

public:
    Monster(const string& n, int h, int a, int d)
        : name(n), hp(h), attack(a), defense(d) {
    }

    virtual void attackEnemy(Character& target) {
        int damage = attack - target.getDefense();
        if (damage < 0) damage = 0;
        target.takeDamage(damage);
    }

    int getHp() const { return hp; }
    string getName() const { return name; } // Добавлен метод доступа

    void takeDamage(int damage) {
        if (hp - damage < 0) throw NegativeHealthException();
        hp -= damage;
    }
};

void Character::attackEnemy(Monster& target) {
    int damage = attack - target.getHp(); // Исправленная логика атаки
    if (damage < 0) damage = 0;
    target.takeDamage(damage);
}

class Goblin : public Monster {
public:
    Goblin() : Monster("Goblin", 30, 5, 2) {}
};

class Dragon : public Monster {
public:
    Dragon() : Monster("Dragon", 100, 20, 10) {}
};

class Skeleton : public Monster {
public:
    Skeleton() : Monster("Skeleton", 40, 8, 5) {}
};

class Game {
    Character* character;
    vector<Monster*> monsters;
    Logger<string> logger;

public:
    Game() : logger("game_log.txt") {
        monsters.push_back(new Goblin());
        monsters.push_back(new Skeleton());
        monsters.push_back(new Dragon());
    }

    ~Game() {
        for (auto m : monsters) delete m;
    }

    void start() {
        string name;
        cout << "Enter character name: ";
        cin >> name;
        character = new Character(name);
        gameLoop();
        delete character;
    }

    void gameLoop() {
        while (true) {
            cout << "\n1. Fight monster\n2. Show inventory\n3. Exit\nChoice: ";
            int choice;
            cin >> choice;

            try {
                switch (choice) {
                case 1: fight(); break;
                case 2: character->getInventory().show(); break;
                case 3: return;
                default: cout << "Invalid choice!" << endl;
                }
            }
            catch (const exception& e) {
                cerr << "Error: " << e.what() << endl;
            }
        }
    }

    void fight() {
        Monster* monster = monsters[rand() % monsters.size()];
        cout << "\nA wild " << monster->getName() << " appears!" << endl; // Использование метода доступа

        while (true) {
            // Атака игрока
            character->attackEnemy(*monster);
            logger.log("Player attacked monster");

            if (monster->getHp() <= 0) {
                cout << "Monster defeated!" << endl;
                character->gainExp(50);
                character->getInventory().addItem("Gold");
                break;
            }

            // Атака монстра
            monster->attackEnemy(*character);
            logger.log("Monster attacked player");

            if (character->getHp() <= 0) {
                cout << "Player defeated!" << endl;
                break;
            }

            cout << "Player HP: " << character->getHp()
                << " | Monster HP: " << monster->getHp() << endl;
        }
    }
};

int main() {
    srand(static_cast<unsigned int>(time(nullptr))); // Исправление преобразования типа
    Game game;
    game.start();
    return 0;
}
